<?php


declare(strict_types=1);

namespace App\Presenters;

use App\Core\ContactModel;
use BasePresenter;
use Nette;

final class ContactTypesPresenter extends BasePresenter
{

    /** @var ContactModel @inject */
    private $contact;


    function __construct(ContactModel $contact)
    {
        $this->contact = $contact;
    }


    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $id = $this->getParameter('id');
        $this->template->contactTypes = $this->contact->getContactTypes(30);
    }

    protected function createComponentEditContactTypeForm(): Nette\Application\UI\Form
    {
        $form = new Nette\Application\UI\Form;
        $id = $this->getParameter('id');

        $form->addText('name', 'Name');
        $form->addText('validation_regexp', 'RegExp');

        if ($id !== null) {
            $contactType = $this->contact->getContactTypeById((int)$id);

            $form['name']->setDefaultValue($contactType->name);
            $form['validation_regexp']->setDefaultValue($contactType->validationRegExp);
        }
        $form->addSubmit('odeslat', 'Uložit');
        $form->onSuccess[] = [$this, 'editContactTypeFormSuceeded'];

        return $form;
    }

    public function editContactTypeFormSuceeded(Nette\Application\UI\Form $form, \stdClass $values)
    {
        $id = $this->getParameter('id');
        if ($id !== null) {
            $this->contact->editContactType(new \ContactType((array)$values, $id));
        } else {
            $this->contact->addContactType(new \ContactType((array)$values));
        }
        $this->flashMessage('Formulář byl úspěšně odeslán');
        $this->redirect('ContactTypes:');
    }

    function actionEditor($id): void
    {
    }
}