<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Core\ContactModel;
use App\Core\UsersModel;
use BasePresenter;
use Nette;

final class ContactsPresenter extends BasePresenter
{
    /** @var UsersModel @inject */
    private $users;

    /** @var ContactModel @inject */
    private $contact;

    function __construct(UsersModel $users, ContactModel $contact)
    {
        $this->users = $users;
        $this->contact = $contact;
    }


    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $id = $this->getParameter('id');

        $this->template->contacts = $this->contact->getContacts(30);
    }

    protected function createComponentEditContactForm(): Nette\Application\UI\Form
    {
        $form = new Nette\Application\UI\Form;
        $id = $this->getParameter('id');
        $contactTypes = $this->contact->getContactTypes();
        $persons = $this->users->getUsers(20);

        $form->addSelect('id_person', 'Person', array_reduce($persons, function ($persons, $person){
            $persons[$person->id] = $person->nickname;
            return $persons;
        }));

        $form->addSelect('id_contact_type', 'Contact type', array_reduce($contactTypes, function ($contactTypeList, $contactType) {
            $contactTypeList[$contactType->id] = $contactType->name;
            return $contactTypeList;
        }));
        $form->addText('contact', 'Contact');

        if ($id !== null) {
            $contact = $this->contact->getContactById($id);
            $form['id_contact_type']->setDefaultValue($contact->contactType->id);
            $form['contact']->setDefaultValue($contact->contact);
        }
        $form->addSubmit('odeslat', 'Uložit');
        $form->onValidate[] = [$this, 'validateEditContactForm'];
        $form->onSuccess[] = [$this, 'editContactFormSuceeded'];

        return $form;
    }

    public function validateEditContactForm(Nette\Application\UI\Form $form): void {
        $values = $form->getValues();
        $contactType = $this->contact->getContactTypeById($values['id_contact_type']);
        if (preg_match($contactType->validationRegExp, $values['contact']) !== 1) {
            $form->addError('Špatně zadaný kontakt typu ' . $contactType->name . '.');
        }
    }

    public function editContactFormSuceeded(Nette\Application\UI\Form $form, \stdClass $values) {
        $id = $this->getParameter('id');
        $values = (array) $values;
        $this->contact->loadContactTypeById($values['id_contact_type'], $values);
        if($id!== null) {
            $this->contact->editContact(new \Contact((array) $values, $id));
        } else {
            $this->contact->addContact(new \Contact((array) $values));
        }
        $this->flashMessage('Formulář byl úspěšně odeslán');
        $this->redirect('Contacts:');
    }

    function actionEditor($id): void {
        if($id !== null) {
            $this->template->contact = $this->contact->getContactById((int) $id);
        }
    }

    function handleDelete($id){
        $this->contact->deleteContactById($id);
    }
}