<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Core\RelationsModel;
use App\Core\UsersModel;
use BasePresenter;
use Nette;

final class RelationsPresenter extends BasePresenter
{
    /** @var UsersModel @inject */
    private $users;

    /** @var RelationsModel @inject */
    private $relations;

    function __construct(UsersModel $users, RelationsModel $relations)
    {
        $this->users = $users;
        $this->relations = $relations;
    }


    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $id = $this->getParameter('id');
        if($id !== null) {
            $this->template->relation = $this->relations->getRelationById((int) $id);
        } else {
            $relations = $this->relations->getRelations(30);
            $this->template->relations = $relations;
            $this->template->usernames = $this->users->getUserNames(array_map(function ($item){return $item->userIds;}, $relations));
        }
    }

    protected function createComponentEditRelationForm(): Nette\Application\UI\Form
    {
        $form = new Nette\Application\UI\Form;
        $id = $this->getParameter('id');
        $relationTypes = $this->relations->getRelationTypes();
        $persons = $this->users->getUsers(20);

        $form->addSelect('id_person1', 'Person 1', array_reduce($persons, function ($persons, $person){
            $persons[$person->id] = $person->nickname;
            return $persons;
        }));

        $form->addSelect('id_person2', 'Person 2', array_reduce($persons, function ($persons, $person){
            $persons[$person->id] = $person->nickname;
            return $persons;
        }));

        $form->addSelect('id_relation_type', 'Relation type', array_reduce($relationTypes, function ($relationTypeList, $relationType) {
            $relationTypeList[$relationType->id] = $relationType->name;
            return $relationTypeList;
        }));

        $form->addTextArea('description', 'Description');

        if ($id !== null) {
            $relation = $this->relations->getRelationById($id);
            $form['id_relation_type']->setDefaultValue($relation->relationType->id);
            $form['description']->setDefaultValue($relation->description);
            $form['id_person1']->setDefaultValue($relation->userIds[0]);
            $form['id_person2']->setDefaultValue($relation->userIds[1]);
        }
        $form->addSubmit('odeslat', 'Uložit');
        $form->onSuccess[] = [$this, 'editRelationFormSuceeded'];

        return $form;
    }


    public function editRelationFormSuceeded(Nette\Application\UI\Form $form, \stdClass $values) {
        $id = $this->getParameter('id');
        $values = (array) $values;
        $this->relations->loadRelationTypeById($values['id_relation_type'], $values);
        if($id!== null) {
            $this->relations->editRelation(new \Relation($values, $id));
        } else {
            $this->relations->addRelation(new \Relation($values));
        }
        $this->flashMessage('Formulář byl úspěšně odeslán');
        $this->redirect('Relations:');
    }

    function actionEditor($id): void {}
}