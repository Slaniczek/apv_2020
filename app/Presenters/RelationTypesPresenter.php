<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Core\RelationsModel;
use BasePresenter;
use Nette;

final class RelationTypesPresenter extends BasePresenter
{

    /** @var RelationsModel @inject */
    private $relation;


    function __construct(RelationsModel $relation)
    {
        $this->relation = $relation;
    }


    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $id = $this->getParameter('id');
        $this->template->relationTypes = $this->relation->getRelationTypes(30);
    }

    protected function createComponentEditRelationTypeForm(): Nette\Application\UI\Form
    {
        $form = new Nette\Application\UI\Form;
        $id = $this->getParameter('id');

        $form->addText('name', 'Name');

        if ($id !== null) {
            $relationType = $this->relation->getRelationTypeById((int)$id);

            $form['name']->setDefaultValue($relationType->name);
        }
        $form->addSubmit('odeslat', 'Uložit');
        $form->onSuccess[] = [$this, 'editRelationTypeFormSuceeded'];

        return $form;
    }

    public function editRelationTypeFormSuceeded(Nette\Application\UI\Form $form, \stdClass $values)
    {
        $id = $this->getParameter('id');
        $values = (array) $values;
        if ($id !== null) {
            $this->relation->editRelationType(new \RelationType($values['name'], $id));
        } else {
            $this->relation->addRelationType(new \RelationType($values['name']));
        }
        $this->flashMessage('Formulář byl úspěšně odeslán');
        $this->redirect('RelationTypes:');
    }

    function actionEditor($id): void
    {
    }
}