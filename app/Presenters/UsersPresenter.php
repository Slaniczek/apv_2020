<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Core\LocationsModel;
use BasePresenter;
use Nette;
use App\Core\UsersModel;
use Vodacek\Forms\Controls\DateInput;

final class UsersPresenter extends BasePresenter
{
    /** @var Users @inject */
    private $users;

    /** @var LocationsModel @inject */
    private $locations;

    function __construct(UsersModel $users, LocationsModel $locations)
    {
        $this->users = $users;
        $this->locations = $locations;
    }

    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $id = $this->getParameter('id');
        if($id !== null) {
            $this->template->usr = $this->users->getUser((int) $id);
        } else {
            $this->template->users = $this->users->getUsers();
        }
    }

    protected function createComponentEditPersonForm(): Nette\Application\UI\Form {
        $form = new Nette\Application\UI\Form;
            $form->addText('nickname', 'Nickname')->setRequired('Zadejte prosím přezdívku');
            $form->addText('last_name','Last name')->setRequired('Zadejte prosím příjmení');
            $form->addText('first_name','First name')->setRequired('Zadejte prosím křestní jméno');
            $form->addSelect('id_location', 'Location', array_reduce(
                $this->locations->getLocations(),
                function($arr, $loc){
                    $arr[$loc->id] = $loc->city;
                    return $arr;}
                    ));
            $form['birth_day'] = new DateInput('Birth name', DateInput::TYPE_DATE);
            $form['birth_day']->setRequired('Zadejte prosím datum narození');
            $form->addSelect('gender','Genger', [
                'male'=>'Muž',
                'female'=>'Žena'
            ]);
            $form->addInteger('height','Výška');
            $id = $this->getParameter('id');
            if ($id !== null) {
                $person = $this->users->getUser($id);
                $form['nickname']->setDefaultValue($person->nickname);
                $form['first_name']->setDefaultValue($person->firstName);
                $form['last_name']->setDefaultValue($person->lastName);
                $form['id_location']->setDefaultValue($person->idLocation);
                $form['birth_day']->setDefaultValue($person->birthDay);
                $form['gender']->setDefaultValue($person->gender);
                $form['height']->setDefaultValue($person->height);
                $form->addSubmit('odeslat','Upravit osobu');
            } else {
                $form->addSubmit('odeslat','Vytvořit osobu');
            }
        $form->onSuccess[] = [$this, 'editPersonFormSuceeded'];
        return $form;
    }

    public function editPersonFormSuceeded(Nette\Application\UI\Form $form, \stdClass $values) {
        $id = $this->getParameter('id');
        if($id!== null) {
            $this->users->editUser(new \Person((array) $values, $id));
        } else {
            $this->users->addUser(new \Person((array) $values));
        }
        $this->flashMessage('Formulář byl úspěšně odeslán');
        $this->redirect('Users:detail', $id);
    }

    function actionEditor($id): void {}
    function actionDetail($id): void {}
}
